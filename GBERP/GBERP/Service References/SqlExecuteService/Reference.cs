//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GBERP.SqlExecuteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecuteResult", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GBERP.SqlExecuteService.QueryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GBERP.SqlExecuteService.StatementResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GBERP.SqlExecuteService.QueryResultSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GBERP.SqlExecuteService.LoginResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GBERP.SqlExecuteService.AppLoginResult))]
    public partial class ExecuteResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResult", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    public partial class QueryResult : GBERP.SqlExecuteService.ExecuteResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> ResultDictionaryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> ResultDictionary {
            get {
                return this.ResultDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultDictionaryField, value) != true)) {
                    this.ResultDictionaryField = value;
                    this.RaisePropertyChanged("ResultDictionary");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatementResult", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    public partial class StatementResult : GBERP.SqlExecuteService.ExecuteResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatementsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Statements {
            get {
                return this.StatementsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatementsField, value) != true)) {
                    this.StatementsField = value;
                    this.RaisePropertyChanged("Statements");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryResultSet", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    public partial class QueryResultSet : GBERP.SqlExecuteService.ExecuteResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>>> ResultDictionaryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>>> ResultDictionary {
            get {
                return this.ResultDictionaryField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultDictionaryField, value) != true)) {
                    this.ResultDictionaryField = value;
                    this.RaisePropertyChanged("ResultDictionary");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginResult", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    public partial class LoginResult : GBERP.SqlExecuteService.ExecuteResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanExecDDLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanExecDDL {
            get {
                return this.CanExecDDLField;
            }
            set {
                if ((this.CanExecDDLField.Equals(value) != true)) {
                    this.CanExecDDLField = value;
                    this.RaisePropertyChanged("CanExecDDL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppLoginResult", Namespace="http://schemas.datacontract.org/2004/07/SqlExecuteService")]
    [System.SerializableAttribute()]
    public partial class AppLoginResult : GBERP.SqlExecuteService.ExecuteResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpID {
            get {
                return this.EmpIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpIDField, value) != true)) {
                    this.EmpIDField = value;
                    this.RaisePropertyChanged("EmpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionName {
            get {
                return this.VersionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNameField, value) != true)) {
                    this.VersionNameField = value;
                    this.RaisePropertyChanged("VersionName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SqlExecuteService.ISqlExecute")]
    public interface ISqlExecute {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ERPLoginFromAndroid", ReplyAction="http://tempuri.org/ISqlExecute/ERPLoginFromAndroidResponse")]
        GBERP.SqlExecuteService.AppLoginResult ERPLoginFromAndroid(string erpUserName, string erpPassword, string userName, string password, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ERPLoginFromAndroid", ReplyAction="http://tempuri.org/ISqlExecute/ERPLoginFromAndroidResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.AppLoginResult> ERPLoginFromAndroidAsync(string erpUserName, string erpPassword, string userName, string password, string appName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteNoneQuery", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteNoneQueryResponse")]
        GBERP.SqlExecuteService.ExecuteResult ExecuteNoneQuery(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteNoneQuery", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteNoneQueryResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ExecuteNoneQueryAsync(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteNoneQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteNoneQueryWithServerResponse")]
        GBERP.SqlExecuteService.ExecuteResult ExecuteNoneQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteNoneQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteNoneQueryWithServerResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ExecuteNoneQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteQuery", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteQueryResponse")]
        GBERP.SqlExecuteService.QueryResult ExecuteQuery(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteQuery", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteQueryResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> ExecuteQueryAsync(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteQueryWithServerResponse")]
        GBERP.SqlExecuteService.QueryResult ExecuteQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ExecuteQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/ExecuteQueryWithServerResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> ExecuteQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetData", ReplyAction="http://tempuri.org/ISqlExecute/GetDataResponse")]
        GBERP.SqlExecuteService.QueryResult GetData(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetData", ReplyAction="http://tempuri.org/ISqlExecute/GetDataResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> GetDataAsync(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetStatement", ReplyAction="http://tempuri.org/ISqlExecute/GetStatementResponse")]
        GBERP.SqlExecuteService.StatementResult GetStatement(string factoryID, string key, string accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetStatement", ReplyAction="http://tempuri.org/ISqlExecute/GetStatementResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.StatementResult> GetStatementAsync(string factoryID, string key, string accessToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetDataSet", ReplyAction="http://tempuri.org/ISqlExecute/GetDataSetResponse")]
        GBERP.SqlExecuteService.QueryResultSet GetDataSet(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/GetDataSet", ReplyAction="http://tempuri.org/ISqlExecute/GetDataSetResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResultSet> GetDataSetAsync(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/Login", ReplyAction="http://tempuri.org/ISqlExecute/LoginResponse")]
        GBERP.SqlExecuteService.LoginResult Login(string userName, string password, string clientHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/Login", ReplyAction="http://tempuri.org/ISqlExecute/LoginResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.LoginResult> LoginAsync(string userName, string password, string clientHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQuery", ReplyAction="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryResponse")]
        GBERP.SqlExecuteService.ExecuteResult SimpleExecuteNoneQuery(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQuery", ReplyAction="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> SimpleExecuteNoneQueryAsync(string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryWithServerResponse")]
        GBERP.SqlExecuteService.ExecuteResult SimpleExecuteNoneQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryWithServer", ReplyAction="http://tempuri.org/ISqlExecute/SimpleExecuteNoneQueryWithServerResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> SimpleExecuteNoneQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ChangePassword", ReplyAction="http://tempuri.org/ISqlExecute/ChangePasswordResponse")]
        GBERP.SqlExecuteService.ExecuteResult ChangePassword(string userName, string prevPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/ChangePassword", ReplyAction="http://tempuri.org/ISqlExecute/ChangePasswordResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ChangePasswordAsync(string userName, string prevPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/BulkInsert", ReplyAction="http://tempuri.org/ISqlExecute/BulkInsertResponse")]
        GBERP.SqlExecuteService.ExecuteResult BulkInsert(string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/BulkInsert", ReplyAction="http://tempuri.org/ISqlExecute/BulkInsertResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> BulkInsertAsync(string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/BulkInsertWithServer", ReplyAction="http://tempuri.org/ISqlExecute/BulkInsertWithServerResponse")]
        GBERP.SqlExecuteService.ExecuteResult BulkInsertWithServer(string serverName, string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISqlExecute/BulkInsertWithServer", ReplyAction="http://tempuri.org/ISqlExecute/BulkInsertWithServerResponse")]
        System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> BulkInsertWithServerAsync(string serverName, string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISqlExecuteChannel : GBERP.SqlExecuteService.ISqlExecute, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SqlExecuteClient : System.ServiceModel.ClientBase<GBERP.SqlExecuteService.ISqlExecute>, GBERP.SqlExecuteService.ISqlExecute {
        
        public SqlExecuteClient() {
        }
        
        public SqlExecuteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SqlExecuteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlExecuteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SqlExecuteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GBERP.SqlExecuteService.AppLoginResult ERPLoginFromAndroid(string erpUserName, string erpPassword, string userName, string password, string appName) {
            return base.Channel.ERPLoginFromAndroid(erpUserName, erpPassword, userName, password, appName);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.AppLoginResult> ERPLoginFromAndroidAsync(string erpUserName, string erpPassword, string userName, string password, string appName) {
            return base.Channel.ERPLoginFromAndroidAsync(erpUserName, erpPassword, userName, password, appName);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult ExecuteNoneQuery(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteNoneQuery(initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ExecuteNoneQueryAsync(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteNoneQueryAsync(initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult ExecuteNoneQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteNoneQueryWithServer(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ExecuteNoneQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteNoneQueryWithServerAsync(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.QueryResult ExecuteQuery(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteQuery(initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> ExecuteQueryAsync(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteQueryAsync(initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.QueryResult ExecuteQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteQueryWithServer(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> ExecuteQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.ExecuteQueryWithServerAsync(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.QueryResult GetData(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord) {
            return base.Channel.GetData(factoryID, key, parameters, userName, passWord);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResult> GetDataAsync(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord) {
            return base.Channel.GetDataAsync(factoryID, key, parameters, userName, passWord);
        }
        
        public GBERP.SqlExecuteService.StatementResult GetStatement(string factoryID, string key, string accessToken) {
            return base.Channel.GetStatement(factoryID, key, accessToken);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.StatementResult> GetStatementAsync(string factoryID, string key, string accessToken) {
            return base.Channel.GetStatementAsync(factoryID, key, accessToken);
        }
        
        public GBERP.SqlExecuteService.QueryResultSet GetDataSet(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord) {
            return base.Channel.GetDataSet(factoryID, key, parameters, userName, passWord);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.QueryResultSet> GetDataSetAsync(string factoryID, string key, System.Collections.Generic.Dictionary<string, string> parameters, string userName, string passWord) {
            return base.Channel.GetDataSetAsync(factoryID, key, parameters, userName, passWord);
        }
        
        public GBERP.SqlExecuteService.LoginResult Login(string userName, string password, string clientHost) {
            return base.Channel.Login(userName, password, clientHost);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.LoginResult> LoginAsync(string userName, string password, string clientHost) {
            return base.Channel.LoginAsync(userName, password, clientHost);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult SimpleExecuteNoneQuery(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.SimpleExecuteNoneQuery(initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> SimpleExecuteNoneQueryAsync(string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.SimpleExecuteNoneQueryAsync(initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult SimpleExecuteNoneQueryWithServer(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.SimpleExecuteNoneQueryWithServer(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> SimpleExecuteNoneQueryWithServerAsync(string serverName, string initialCatalog, string sqlText, string userName, string password) {
            return base.Channel.SimpleExecuteNoneQueryWithServerAsync(serverName, initialCatalog, sqlText, userName, password);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult ChangePassword(string userName, string prevPassword, string newPassword) {
            return base.Channel.ChangePassword(userName, prevPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> ChangePasswordAsync(string userName, string prevPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(userName, prevPassword, newPassword);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult BulkInsert(string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password) {
            return base.Channel.BulkInsert(initialCatalog, tableName, columnNames, data, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> BulkInsertAsync(string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password) {
            return base.Channel.BulkInsertAsync(initialCatalog, tableName, columnNames, data, userName, password);
        }
        
        public GBERP.SqlExecuteService.ExecuteResult BulkInsertWithServer(string serverName, string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password) {
            return base.Channel.BulkInsertWithServer(serverName, initialCatalog, tableName, columnNames, data, userName, password);
        }
        
        public System.Threading.Tasks.Task<GBERP.SqlExecuteService.ExecuteResult> BulkInsertWithServerAsync(string serverName, string initialCatalog, string tableName, string[] columnNames, System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, string>> data, string userName, string password) {
            return base.Channel.BulkInsertWithServerAsync(serverName, initialCatalog, tableName, columnNames, data, userName, password);
        }
    }
}
